{
    "/README.md": "Minecraft AI Competition and House Building",
    "/README.md:101-114": "Video Pre-Training Demonstration",
    "/README.md:116-136": "Major Limitations and Versions Used",
    "/README.md:136-152": "Minecraft AI Model Training Versions",
    "/README.md:153-168": "Minecraft AI: Enhancing Performance through Early Data",
    "/README.md:168-182": "Simple Wooden House Building Guide",
    "/README.md:182-194": "Timed Minecraft Demo: House Building Challenge",
    "/README.md:196-215": "Time-Based Task Completion",
    "/README.md:216-237": "Random Starting Inventory Generator",
    "/README.md:238-250": "Random Biome-based Hotbar Items",
    "/README.md:251-263": "Randomized Inventory Population",
    "/README.md:264-288": "Sunflower Inventory Boost",
    "/README.md:288-304": "Minecraft Diamonds and Version Updates",
    "/README.md:3-35": "Video PreTraining Model Setup and Usage",
    "/README.md:304-311": "Minecraft Testing Guidelines",
    "/README.md:312-338": "Demonstration Format and Index",
    "/README.md:340-388": "Action and File Structure for Data Loader",
    "/README.md:37-51": "Pre-Trained Minecraft RL Models",
    "/README.md:389-418": "JSON Game State Data for Minecraft",
    "/README.md:420-439": "Cave Hunt and Waterfall Snapshot",
    "/README.md:440-451": "Village-Friendly Animal Pen Building Prompt",
    "/README.md:451-467": "AI Minecraft Tasks: Construct, Protect, and Tour in 5 Minutes",
    "/README.md:467-487": "Eco-Friendly Minecraft Village Building",
    "/README.md:488-497": "Acknowledging Authors & Crediting Anssi Kanervisto",
    "/README.md:52-65": "Pre-Trained Minecraft Models and Fine-Tuning",
    "/README.md:66-85": "Pre-Trained Minecraft Models for Faster Tech Tree Progress",
    "/README.md:86-99": "IDM Demonstration with Contractor Recordings",
    "/agent.py": "Reinforcement Learning Minecraft Agent Setup",
    "/agent.py:1-40": "Minecraft Agent Configuration",
    "/agent.py:102-128": "MineRL Agent Image Resizing",
    "/agent.py:129-154": "Agent Class and Methods",
    "/agent.py:155-175": "Action Transformation and Conversion in MineRL",
    "/agent.py:176-199": "Observation-Action Class",
    "/agent.py:200-206": "Agent's Policy Action Selection",
    "/agent.py:41-77": "Game Agent Parameter Settings",
    "/agent.py:78-101": "MineRL Environment Validation and Setup",
    "/behavioural_cloning.py": "Agent-Based Actor-Critic Training in Behavioral Cloning",
    "/behavioural_cloning.py:1-34": "Behavioral Cloning: Fine-Tuning with Gradient Accumulation",
    "/behavioural_cloning.py:115-139": "Training Policy Model with Behavioral Cloning",
    "/behavioural_cloning.py:140-143": "Command Line Parsing for Behavioral Cloning Training",
    "/behavioural_cloning.py:36-60": "Load and Configure Agent Object",
    "/behavioural_cloning.py:62-91": "Training Environment Setup",
    "/behavioural_cloning.py:92-114": "Policy-Based Actor-Critic Environment Setup",
    "/data_loader.py": "Batch Data Loader with Processes",
    "/data_loader.py:1-40": "MineRL VPT Data Loader",
    "/data_loader.py:114-134": "Compositing and Resizing Cursors",
    "/data_loader.py:135-155": "Sub-Inefficient Sequence Loader",
    "/data_loader.py:156-178": "Video Data Loader for Shuffled Demonstrations",
    "/data_loader.py:179-209": "Batch Data Loading Workers",
    "/data_loader.py:210-222": "Batch Data Processor",
    "/data_loader.py:41-67": "Video Game Annotation Extractor",
    "/data_loader.py:68-91": "Scrollwheel-based Attack Unsticking",
    "/data_loader.py:92-113": "Stuck State Detection and Action Removal",
    "/inverse_dynamics_model.py": "IDMAgent: Minecraft Predictor",
    "/inverse_dynamics_model.py:1-33": "IDMAgent: Minecraft Action Predictor",
    "/inverse_dynamics_model.py:34-56": "Agent Initialization and Weight Loading",
    "/inverse_dynamics_model.py:57-79": "Policy to MineRL Action Conversion",
    "/inverse_dynamics_model.py:80-95": "Agent State Tracking and Action Prediction",
    "/lib/action_head.py": "Abstract Action Head Class for RL Action Spaces",
    "/lib/action_head.py:1-36": "Fan-In Initialized Action Heads",
    "/lib/action_head.py:120-151": "Categorical Action Head Initialization",
    "/lib/action_head.py:152-174": "Action Head Class Definition and Forward Function",
    "/lib/action_head.py:176-196": "Functions for Action Distributions",
    "/lib/action_head.py:197-217": "Gumbel-Softmax for Categorical Training",
    "/lib/action_head.py:218-243": "DictActionHead Class: Forward Pass and Parameter Reset",
    "/lib/action_head.py:244-264": "Action Head Class: Supporting Methods",
    "/lib/action_head.py:265-275": "ActionHead Selection",
    "/lib/action_head.py:37-63": "Abstract Base Class for Action Heads",
    "/lib/action_head.py:64-89": "Orthogonal Initialization for Action Head",
    "/lib/action_head.py:91-119": "Calculate Entropy, Z-Score, and KL Divergence",
    "/lib/action_mapping.py": "Action Mapping and Management",
    "/lib/action_mapping.py:1-32": "Action Mapping Class for Minecraft Customization",
    "/lib/action_mapping.py:124-142": "Camera Meta Actions Mapping",
    "/lib/action_mapping.py:143-161": "Button and Camera Array Mapping Setup",
    "/lib/action_mapping.py:162-180": "Factored Action-Camera Combinations",
    "/lib/action_mapping.py:181-200": "Assertion Check and Action Mapping",
    "/lib/action_mapping.py:201-223": "Factoring New Action Space",
    "/lib/action_mapping.py:225-234": "Class with Three Methods Defined",
    "/lib/action_mapping.py:33-64": "Abstract Base Class for Action Mapping",
    "/lib/action_mapping.py:65-82": "Button Selection from Factored Action Space",
    "/lib/action_mapping.py:83-97": "Priority-based Action Mapping for 'None' Button",
    "/lib/action_mapping.py:98-122": "Action Mapping Classes for Video Games",
    "/lib/actions.py": "Action-based Quantization in Minecraft",
    "/lib/actions.py:1-54": "Minecraft Action and Camera Quantization",
    "/lib/actions.py:132-160": "Functions: Item to Name Conversion, Dict to Numpy, and Numpy to Dict",
    "/lib/actions.py:161-178": "Camera Array Transformations",
    "/lib/actions.py:55-68": "Mu-law and Linear Quantization Schemes",
    "/lib/actions.py:69-95": "Discretize and Undiscretize Values with Class",
    "/lib/actions.py:97-130": "Action Transformer Class for MinerL Environment",
    "/lib/impala_cnn.py": "Customizable ImpalaCNN Architecture",
    "/lib/impala_cnn.py:1-42": "ImpalaCNN: Residual Basic Blocks",
    "/lib/impala_cnn.py:108-139": "ImpalaCNN Model Architecture",
    "/lib/impala_cnn.py:140-171": "ImpalaCNN: Custom Convolutional Class",
    "/lib/impala_cnn.py:172-195": "Stacked 2D Convolutional CNN Model",
    "/lib/impala_cnn.py:43-78": "ImpalaCNN: 1D Conv Layers for Image Classification",
    "/lib/impala_cnn.py:79-107": "ImpalaCNN: Customizable Convolutional Neural Network",
    "/lib/masked_attention.py": "Masked Attention Mechanism for Time Series",
    "/lib/masked_attention.py:1-31": "Band Diagonal Time Series Mask",
    "/lib/masked_attention.py:104-113": "Masked Attention Mechanism Parameters",
    "/lib/masked_attention.py:114-147": "Masked Attention Initialization",
    "/lib/masked_attention.py:148-173": "Masked Attention Class and Forward Pass",
    "/lib/masked_attention.py:174-182": "Masked Attention Method",
    "/lib/masked_attention.py:32-54": "Generate Boolean Mask for Masked Attention",
    "/lib/masked_attention.py:55-73": "Update State Mask for Masked Attention",
    "/lib/masked_attention.py:75-102": "Dynamic Episode Masking in Transformer Layers",
    "/lib/minecraft_util.py": "Average Entropy Calculator",
    "/lib/minecraft_util.py:1-32": "Decorator for Storing Method Arguments",
    "/lib/minecraft_util.py:34-55": "Normalized Entropy Calculation",
    "/lib/minecraft_util.py:56-79": "Calculate Entropy of Gaussian Action Heads",
    "/lib/minecraft_util.py:80-88": "Average Entropy from DiagGaussianActionHead/DictActionHead",
    "/lib/misc.py": "Data Processing Tasks: Calculating Products and Reshaping Input Data",
    "/lib/misc.py:1-43": "Data Manipulation Functions",
    "/lib/misc.py:119-157": "Sort Symbols in List",
    "/lib/misc.py:158-187": "Check and Update Product of List Values",
    "/lib/misc.py:188-223": "Shape Reshaping and Exception Handling",
    "/lib/misc.py:224-240": "Input Validation and Shape Inference",
    "/lib/misc.py:241-263": "Utility Functions in lib/misc.py:241-263",
    "/lib/misc.py:44-89": "Transpose and Compose Functions",
    "/lib/misc.py:90-118": "Handling Int and Str Calculations in Function",
    "/lib/mlp.py": "MLP Class: Neural Network Architecture",
    "/lib/normalize_ewma.py": "Efficient Normalization with Debiased Means",
    "/lib/normalize_ewma.py:1-28": "Exponential Weighted Normalization Module",
    "/lib/normalize_ewma.py:29-51": "Debiased Mean and Variance Calculator",
    "/lib/normalize_ewma.py:52-60": "Efficient Data Normalization and EWMA Calculation",
    "/lib/policy.py": "Minecraft Reinforcement Learning with PyTorch",
    "/lib/policy.py:1-32": "Normalizing Images with ImgPreprocessing Class",
    "/lib/policy.py:123-150": "Class Initialization and Attributes",
    "/lib/policy.py:151-178": "Layer Normalization Setup",
    "/lib/policy.py:179-208": "Initializing Recurrent Module and Forward Pass",
    "/lib/policy.py:209-238": "MinecraftAgentPolicy Class Definition",
    "/lib/policy.py:240-269": "Neural Policy Decisions Class",
    "/lib/policy.py:271-299": "Policy Network Functions",
    "/lib/policy.py:300-323": "Time Dimension Policy Evaluation",
    "/lib/policy.py:324-357": "InverseActionNet: MinecraftPolicy Subclass",
    "/lib/policy.py:33-62": "ImgObsPreprocessing Class",
    "/lib/policy.py:358-386": "3D Convolution Layer Initialization",
    "/lib/policy.py:388-424": "Inverse Action Policy Class",
    "/lib/policy.py:425-457": "Training RL Policy with PyTorch",
    "/lib/policy.py:458-467": "Log Probability Action Check",
    "/lib/policy.py:63-91": "Policy Class with CNN and Layer Initialization",
    "/lib/policy.py:92-122": "Deep Reinforcement Learning Policy Initializer",
    "/lib/scaled_mse_head.py": "Scaled MSE Loss for Linear Layer",
    "/lib/scaled_mse_head.py:1-35": "Scaled MSE Head Layer: Normalizing Linear Outputs",
    "/lib/scaled_mse_head.py:37-50": "Scaled MSE Loss with Normalization/Denormalization",
    "/lib/torch_util.py": "Efficient PyTorch Library Management",
    "/lib/torch_util.py:1-57": "Torch CUDA Utilities",
    "/lib/torch_util.py:132-165": "PyTorch Decorator for Model State Saving",
    "/lib/torch_util.py:166-199": "PyTorch Tensor Data Type Parser",
    "/lib/torch_util.py:200-200": "Squeeze Tensor Dimension",
    "/lib/torch_util.py:60-96": "Linear and LayerNorm Functions in Torch Utils",
    "/lib/torch_util.py:97-131": "LayerNorm, Flatten, Sequential, Load Avg with Metadata",
    "/lib/tree_util.py": "Tree Utilities for PyTree API",
    "/lib/tree_util.py:1-35": "Utility Functions for Dictionary, Tuple, and List Manipulation",
    "/lib/tree_util.py:120-141": "Validate Tree Structure in Python",
    "/lib/tree_util.py:142-171": "Tree Utilities: Building and Unflattening Trees",
    "/lib/tree_util.py:172-201": "PyTreeDef: Tree Nodes Definition and Operations",
    "/lib/tree_util.py:203-256": "Tree-like Object Serialization Class",
    "/lib/tree_util.py:259-280": "Serializing Complex Data Types with PyTree API",
    "/lib/tree_util.py:36-70": "Safe List Operations and Tree Mapping",
    "/lib/tree_util.py:71-93": "Multi-Input Function Applied to Pytree Leaves",
    "/lib/tree_util.py:95-119": "Tree Node Type Determination and Iteration",
    "/lib/util.py": "Neural Network Utilities",
    "/lib/util.py:1-30": "Recursive Module Key Collection and Fan-in ReLU Layer",
    "/lib/util.py:127-161": "Residual Recurrent Block Initialization",
    "/lib/util.py:162-184": "Layer Normalization and MLP Initialization",
    "/lib/util.py:185-216": "Transformer Block Recurrent Pass",
    "/lib/util.py:217-253": "Reversing LSTM Input Sequences",
    "/lib/util.py:254-276": "Band-Repeat Normalization",
    "/lib/util.py:31-62": "Dynamic Normalization Function Initialization",
    "/lib/util.py:64-94": "Residual Recurrent Blocks for Neural Network Stability",
    "/lib/util.py:95-126": "ResidualRecurrentBlock Class",
    "/lib/xf.py": "Strided Attention Mechanism for Transformers",
    "/lib/xf.py:1-43": "Softmax Attention Function",
    "/lib/xf.py:108-138": "XF Class Initialization and Preprocessing",
    "/lib/xf.py:141-163": "StridedAttn: Preprocessing and Initialization",
    "/lib/xf.py:164-192": "Data Preprocessing for Deep Learning Model",
    "/lib/xf.py:193-215": "Transformer Preprocessing Function",
    "/lib/xf.py:216-254": "Attention Layer Base Class",
    "/lib/xf.py:255-291": "Self-Attention Layer Implementation",
    "/lib/xf.py:292-331": "Attention Module Constructor",
    "/lib/xf.py:332-359": "Attention Residual Class",
    "/lib/xf.py:360-382": "Neural Network Forward, Stateless Forward & State Update Functions",
    "/lib/xf.py:383-414": "Residual MLP Layer Initialization",
    "/lib/xf.py:415-450": "ResNet Multi-Scale Module",
    "/lib/xf.py:44-68": "Multi-Head Attention Logit Calculation",
    "/lib/xf.py:451-479": "Split-Apply-Combine with Multiscale Layers",
    "/lib/xf.py:69-107": "Attention Mechanism Class and Split Heads Function",
    "/requirements.txt": "PyTorch, Gym, attrs, OpenCV Installation Guide",
    "/run_agent.py": "Run Agent Model",
    "/run_agent.py:1-30": "Train MineRL Agent with Pre-loaded Model",
    "/run_agent.py:31-35": "Argument Parser Model File Loading",
    "/run_inverse_dynamics_model.py": "Inverse Dynamics Model Game Engine",
    "/run_inverse_dynamics_model.py:1-36": "Key-Action Mapping Dictionary for Game Controls",
    "/run_inverse_dynamics_model.py:114-143": "Loading Agent and Capturing Video Input",
    "/run_inverse_dynamics_model.py:144-170": "Inverse Dynamics Model Execution",
    "/run_inverse_dynamics_model.py:171-197": "Real-Time IDM Model Predictions on Videos",
    "/run_inverse_dynamics_model.py:198-205": "Command Line Arguments Parser",
    "/run_inverse_dynamics_model.py:37-86": "Inverse Dynamics Model Training",
    "/run_inverse_dynamics_model.py:87-112": "Reset Camera Action & Input Handler"
}